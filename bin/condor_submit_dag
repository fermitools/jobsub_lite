#!/usr/bin/python3 -I

#
# condor_submit -- wrapper for condor_submit
# COPYRIGHT 2021 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" wrapper for condor_submit_dag """
# pylint: disable=wrong-import-position,wrong-import-order,import-error
import hashlib
import sys
import os
import os.path

if os.environ.get("LD_LIBRARY_PATH", ""):
    del os.environ["LD_LIBRARY_PATH"]
    os.execv(sys.argv[0], sys.argv)

#
# we are in prefix/bin/jobsub_submit, so find our prefix
#
PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.append(os.path.join(PREFIX, "lib"))
#
# import our local parts
#
from condor import get_schedd, submit_dag
from creds import get_creds, print_cred_paths_from_credset
from token_mods import get_job_scopes, use_token_copy
from utils import set_some_extras

import get_parser


def main():
    """script mainline:
    - parse args
    - get credentials
    - launch
    """

    #
    # set up to use our custom condor_vault_storer until we get
    # the updated one in the condor release
    #
    bindir = os.path.abspath(os.path.dirname(__file__))
    os.environ["_condor_SEC_CREDENTIAL_STORER"] = f"{bindir}/condor_vault_storer"

    parser = get_parser.get_submit_parser(add_condor_epilog=True)

    arglist, cmd_args = parser.parse_known_args()

    # pull dag file out of args
    if len(cmd_args):
        f = cmd_args[-1]
        cmd_args = cmd_args[:-1]

    varg = vars(arglist)
    cred_set = get_creds(varg)
    if arglist.verbose:
        print_cred_paths_from_credset(cred_set)

    if os.environ.get("GROUP", None) is None:
        raise SystemExit(f"{sys.argv[0]} needs -G group or $GROUP in the environment.")

    schedd_add = get_schedd(varg)
    schedd_name = schedd_add.eval("Machine")

    if cred_set.token:
        cred_set.token = use_token_copy(cred_set.token)
        varg["token"] = cred_set.token
        varg["job_scope"] = " ".join(
            get_job_scopes(
                cred_set.token, arglist.need_storage_modify, arglist.need_scope
            )
        )
        m = hashlib.sha256()
        m.update(varg["job_scope"].encode())
        varg["oauth_handle"] = m.hexdigest()[:10]
    if cred_set.proxy:
        varg["proxy"] = cred_set.proxy

    set_some_extras(varg, schedd_name, cred_set)

    print("ready to submit dag, varg: ", repr(varg))

    varg["is_dag"] = True
    submit_dag(f, varg, schedd_name, cmd_args)

    # cleanup(varg)


if __name__ == "__main__":
    main()
