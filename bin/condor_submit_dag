#!/usr/bin/python3 -I

#
# condor_submit -- wrapper for condor_submit
# COPYRIGHT 2021 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" wrapper for condor_submit_dag """
# pylint: disable=wrong-import-position,wrong-import-order,import-error
import sys
import os
import os.path

if os.environ.get("LD_LIBRARY_PATH", ""):
    del os.environ["LD_LIBRARY_PATH"]
    os.execv(sys.argv[0], sys.argv)

#
# we are in prefix/bin/jobsub_submit, so find our prefix
#
PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.append(os.path.join(PREFIX, "lib"))
#
# import our local parts
#
from condor import get_schedd, submit_dag
from creds import get_creds
import get_parser


def main():
    """script mainline:
    - parse args
    - get credentials
    - launch
    """

    #
    # set up to use our custom condor_vault_storer until we get
    # the updated one in the condor release
    #
    bindir = os.path.abspath(os.path.dirname(__file__))
    os.environ["_condor_SEC_CREDENTIAL_STORER"] = f"{bindir}/condor_vault_storer"

    f = sys.argv[-1]
    sys.argv = sys.argv[1:-1]

    parser = get_parser.get_submit_parser(add_condor_epilog=True)

    arglist, cmd_args = parser.parse_known_args()

    # Re-insert --debug/--verbose if it was given
    if arglist.verbose:
        cmd_args.append("-debug")

    proxy, token = get_creds(arglist)

    # put in environment for condor libs to use
    os.environ["X509_USER_PROXY"] = proxy
    os.environ["BEARER_TOKEN_FILE"] = token

    if os.environ.get("GROUP", None) is None:
        raise SystemExit(f"{sys.argv[0]} needs -G group or $GROUP in the environment.")

    schedd_add = get_schedd(vars(arglist))

    submit_dag(f, {}, schedd_add, cmd_args)


if __name__ == "__main__":
    main()
