#!/usr/bin/python3 -I

#
# jobsub_cleanup_cred -- utility to cleanup tokens, etc. on condor_credd's
#
# COPYRIGHT 2022 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
    utility to cleanup tokens, etc. on condor_credd's
"""
# pylint: disable=wrong-import-position,wrong-import-order,import-error

import os
import sys
from typing import List

if os.environ.get("LD_LIBRARY_PATH", ""):
    del os.environ["LD_LIBRARY_PATH"]
    os.execv(sys.argv[0], sys.argv)

PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(PREFIX, "lib"))

from condor import get_schedd_names
from creds import get_creds
import get_parser

# pylint: disable=invalid-name
notes = """

BEARER_TOKEN_FILE=/tmp/bt_token... _condor_COLLECTOR_HOST=xxx _condor_CREDD_HOST=yyy condor_store_cred query-oauth

will list your tokens on that host, something like:
Account: <current> (username)
CredType: oauth

A credential was stored and is valid.

Credential info:
dune.top = 1681431891
dune.use = 1682976510
dune_ab0f4c39c0.top = 1682090936
dune_ab0f4c39c0.use = 1682976330
and:
BEARER_TOKEN_FILE=/tmp/bt_token... _condor_COLLECTOR_HOST=xxx _condor_CREDD_HOST=yyy condor_store_cred delete-oauth -s credname
will delete the one named 'credname' (i.e. either 'dune' or 'dune_ab0f4c39c0' in my example above).
"""


def query_creds(schedd):
    res: List[str] = []
    os.environ["_condor_CREDD_HOST"] = schedd
    parsing = False
    cmd = "condor_store_cred query-oauth"
    last_tname = "xx"
    print(f"credentials on {schedd}:")
    with os.popen(cmd) as scf:
        for line in scf.readlines():
            line = line.strip()
            if line == "Credential info:":
                parsing = True
                continue
            if line and parsing:
                print(line)
                tname, time = line.split("=")
                tname = tname.strip().replace(".top", "").replace(".use", "")
                time = time.strip()
                if tname != last_tname:
                    res.append(tname)
                last_tname = tname
    return res


def del_cred(schedd, tname, no_delete=False):
    os.environ["_condor_CREDD_HOST"] = schedd
    if tname.find("_") > 0:
        tname, handle = tname.split("_")
        cmd = f"condor_store_cred delete-oauth -s {tname} -H {handle}"
    else:
        cmd = f"condor_store_cred delete-oauth -s {tname}"
    act = "I would run: " if no_delete else "Running:"
    print(f"{act} _condor_CREDD_HOST={schedd} {cmd}")
    if not no_delete:
        os.system(cmd)


def main():
    parser = get_parser.get_jobid_parser(add_condor_epilog=True)
    parser.add_argument("-name", help="Set schedd name", default=None)
    parser.add_argument(
        "-n",
        "--no-delete",
        default=False,
        action="store_true",
        help="List commands but don't do them",
    )
    args = parser.parse_args()
    varg = vars(args)
    nflag = args.no_delete

    cs = get_creds(varg)  # pylint: disable=unused-variable
    schedd_list = get_schedd_names(varg)
    if args.name and args.name not in schedd_list:
        print(f"invalid schedd {args.name}")
        sys.exit(1)
    if args.name and args.name in schedd_list:
        schedd_list = [args.name]
    print(f"Schedds to clean: {schedd_list}")
    for schedd_host in schedd_list:
        for tname in query_creds(schedd_host):
            del_cred(schedd_host, tname, nflag)
    print("After:")
    for schedd_host in schedd_list:
        query_creds(schedd_host)
    print("Done.")


if __name__ == "__main__":
    main()
