#!/usr/bin/python3 -I

#
# jobsub_cmd -- generic wrapper for condor commands
# COPYRIGHT 2022 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
    jobsub generic wrapper for condor commands -- parse args like
    -G group,  find schedd, call generic condor cmd
"""
# pylint: disable=wrong-import-position,wrong-import-order,import-error

import argparse
import os
import sys
import re

if os.environ.get("LD_LIBRARY_PATH", ""):
    del os.environ["LD_LIBRARY_PATH"]
    os.execv(sys.argv[0], sys.argv)

PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(PREFIX, "lib"))

import fake_ifdh
import get_parser
import version


class StoreGroupinEnvironment(argparse.Action):
    """Action to store the given group in the GROUP environment variable"""

    # pylint: disable=too-few-public-methods

    def __call__(self, parser, namespace, values, option_string):  # type: ignore
        os.environ["GROUP"] = values
        setattr(namespace, self.dest, values)


def main() -> None:
    """main line of code, proces args, etc."""
    parser = get_parser.get_jobid_parser(add_condor_epilog=True)
    parser.add_argument("-name", help="Set schedd name", default=None)
    parser.add_argument(
        "--jobsub_server", help="backwards compatability; ignored", default=None
    )

    # and find the wrapped command name
    cmd = os.path.basename(sys.argv[0])

    # combine jobsub_q as well
    if cmd == "jobsub_q":
        parser.add_argument("--user", help="username to query", default=None)

    arglist, passthru = parser.parse_known_args()

    if arglist.version:
        print(f"{version.__title__} version {version.__version__}")
        exit()

    if arglist.support_email:
        print(f"Email {version.__email__} for help.")
        exit()

    if cmd != "jobsub_q":
        arglist.user = None

    # Re-insert --debug/--verbose if it was given
    if arglist.verbose:
        passthru.append("-debug")
    # if they gave us --jobid or --user put in the value plain, condor figures it out
    if arglist.jobid:
        passthru.append(arglist.jobid)
    if arglist.user:
        passthru.append(arglist.user)

    if os.environ.get("GROUP", None) is None:
        raise SystemExit(f"{sys.argv[0]} needs -G group or $GROUP in the environment.")

    # make list of arguments to pass to condor command:
    # - the passthru arguments from above, except if we have
    #   any 234@schedd style arguments, pick out the schedd and
    #   keep the 234, and pass --name schedd as well
    execargs = []
    schedd = None

    if arglist.name:
        schedd = arglist.name

    default_formatting = True
    default_constraint = True

    for i in passthru:
        m = re.match(r"([\d.]*)@([\w.]+)", i)
        if m:
            # looks like a jobsub id 12.34@schedd.name
            schedd = m.group(2)
            i = m.group(1)
            if not i:
                continue
        # convert --better-analyze to -better-analyze, etc.
        if i.startswith("--"):
            i = i[1:]

        if i in [
            "-autoformat",
            "-batch",
            "-better-analyze",
            "-dag",
            "-format",
            "-io",
            "-json",
            "-long",
            "-nobatch",
            "-xml",
        ]:
            default_formatting = False

        if (
            i
            in [
                "-allusers",
                "-autocluster",
                "-better-analyze",
                "-constraint",
                "-factory",
                "-unmatchable",
            ]
            or i[:1].isalnum()
        ):
            default_constraint = False

        execargs.append(i)

    if schedd:
        execargs.insert(0, schedd)
        execargs.insert(0, "-name")
        if not os.getenv("_condor_CREDD_HOST", False):
            os.environ["_condor_CREDD_HOST"] = schedd

    # also make sure we have suitable credentials...
    role = fake_ifdh.getRole(arglist.role)
    os.environ["X509_USER_PROXY"] = fake_ifdh.getProxy(role)
    os.environ["BEARER_TOKEN_FILE"] = fake_ifdh.getToken(role)

    # and find the wrapped command name
    cmd = os.path.basename(sys.argv[0])

    # combine jobsub_q as well
    if cmd == "jobsub_q":

        # add -global -schedd-constraint IsJobsubLite==True
        execargs.insert(0, "IsJobsubLite==True")
        execargs.insert(0, "-schedd-constraint")
        execargs.insert(0, "-global")

        if default_constraint:
            execargs.extend(
                [
                    "-allusers",
                    "-constraint",
                    f'''Jobsub_Group=?="{os.environ['GROUP']}"''',
                ]
            )

        if default_formatting:
            # default to old jobsub format
            execargs.extend(
                [
                    "-format",
                    "%-40s",
                    'strcat(split(GlobalJobId,"#")[1],"@",split(GlobalJobId,"#")[0])',
                    "-format",
                    "%-10s\t",
                    """(DAGNodeName=!=''?strcat(" |-",DAGNodeName):Owner)""",
                    "-format",
                    "%-11s ",
                    'formatTime(QDate,"%m/%d %H:%M")',
                    "-format",
                    "%T ",
                    "RemoteWallClockTime",
                    "-format",
                    " %s ",
                    'substr("UIRXCHE",JobStatus,1)',
                    "-format",
                    " %3d ",
                    "JobPrio",
                    "-format",
                    "%6.1f ",
                    "ImageSize/1024.0",
                    "-format",
                    "%s",
                    "JobsubCmd=!=''?JobsubCmd:Cmd",
                    "-format",
                    " %-.20s",
                    "Args",
                    "-format",
                    " %-.20s",
                    "Arguments",
                    "-format",
                    "\n",
                    "Owner",
                ]
            )

            print(
                "JOBSUBJOBID                             OWNER       \tSUBMITTED     RUNTIME"
                "   ST PRIO   SIZE  COMMAND"
            )

    cmd = cmd.replace("jobsub_", "condor_")

    execargs.insert(0, cmd)

    # now run the command with those arguments
    os.execvp("/usr/bin/" + cmd, execargs)


if __name__ == "__main__":
    main()
