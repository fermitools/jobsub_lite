#!/usr/bin/python3 -I

#
# condor_submit -- wrapper for condor_submit
# COPYRIGHT 2021 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" wrapper for condor submit """
# pylint: disable=wrong-import-position,wrong-import-order,import-error
import sys
import os
import os.path
import argparse

if os.environ.get("LD_LIBRARY_PATH", ""):
    del os.environ["LD_LIBRARY_PATH"]
    os.execv(sys.argv[0], sys.argv)

import htcondor

#
# we are in prefix/bin/jobsub_submit, so find our prefix
#
PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.append(os.path.join(PREFIX, "lib"))

#
# import our local parts
#
from condor import get_schedd, submit
from creds import get_creds
import get_parser

# pylint: disable-next=no-member
COLLECTOR_HOST = htcondor.param.get("COLLECTOR_HOST", None)


class StoreGroupinEnvironment(argparse.Action):
    """Action to store the given group in the GROUP environment variable"""

    # pylint: disable=too-few-public-methods

    def __call__(self, parser, namespace, values, option_string):  # type: ignore
        os.environ["GROUP"] = values
        setattr(namespace, self.dest, values)


def main():
    """script mainline:
    - parse args
    - get credentials
    - handle tarfile options
    - set added values from environment, etc.
    - launch
    """

    # BEGIN PATCH
    # use our custom condor_vault_storer until we get
    # the updated one in the condor release
    #
    bindir = os.path.abspath(os.path.dirname(__file__))
    os.environ["_condor_SEC_CREDENTIAL_STORER"] = f"{bindir}/condor_vault_storer"
    # END PATCH

    condor_parser = get_parser.get_submit_parser(add_condor_epilog=True)

    condor_parser.add_argument(
        "-spool",
        required=False,
        help="Spool all required input files, job event log, and proxy"
        " over the connection to the condor_schedd. This is done by"
        " default.",
        action="store_true",
    )

    #   PARSE ARGS TO GET SUBMISSION ARGUMENTS
    args, cmd_args = condor_parser.parse_known_args()

    if args.group is not None:
        group = args.group
    else:
        group = os.environ.get("GROUP", None)

    if group is None:
        raise SystemExit(f"{sys.argv[0]} needs -G group or $GROUP in the environment.")

    schedd_add = get_schedd(vars(args))
    schedd_name = schedd_add.eval("Machine")

    if args.verbose:
        print(f"schedd_name is : {schedd_name}")
        print(f"cmd_args is : {cmd_args}")

    if args.spool:
        print("Spooling is done by default. No need to request it explicitly.")

    if "-name" in cmd_args:
        print(
            "You are running a wrapper for condor_submit. The schedd is"
            " chosen for you. Please remove the '-name <schedd_name>'"
            " arguments from your command line and re-run, OR use"
            " /usr/bin/condor_submit."
        )
        return
    if "-remote" in cmd_args:
        print(
            "You are running a wrapper for condor_submit. The schedd is chosen"
            " for you. Please remove the '-remote <schedd_name>' arguments"
            " from your command line and re-run, OR use /usr/bin/condor_submit."
        )
        return

    proxy, token = get_creds(vars(args))
    if args.verbose:
        print(f"proxy is : {proxy}")
        print(f"token is : {token}")

    #   SUBMIT

    cmd_args.append("-spool")

    submit("", vars(args), schedd_name, cmd_args)


if __name__ == "__main__":
    main()
