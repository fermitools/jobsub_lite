#!/usr/bin/env python3

#
# condor_submit -- wrapper for condor_submit
# COPYRIGHT 2021 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
sys.path = [ x for x in sys.path if x[:6] == '/usr/l' ]

import os
import os.path
import argparse
import htcondor

#
# we are in prefix/bin/jobsub_submit, so find our prefix
#
PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# handle if we're installed as an RPM in /usr/bin..
if PREFIX == '/usr':
    PREFIX='/usr/lib64/python3.6/site-packages/jobsub_lite'

#
# find parts we need in package management
# this means we don't need fancy ups dependencies..
#
sys.path.append(os.path.join(PREFIX,"lib"))

#
# import our local parts
#
from condor import get_schedd, submit
from creds import get_creds

COLLECTOR_HOST = htcondor.param.get("COLLECTOR_HOST", "gpcollector03.fnal.gov")

class StoreGroupinEnvironment(argparse.Action):
    """Action to store the given group in the GROUP environment variable"""

    def __call__(self, parser, namespace, values, option_string=None):
        os.environ["GROUP"] = values
        setattr(namespace, self.dest, values)



def main():
    """ script mainline:
        - parse args
        - get credentials
        - handle tarfile options
        - set added values from environment, etc.
        - launch
    """

    condor_parser = argparse.ArgumentParser(
        description='Queue jobs for execution under HTCondor without the jobsub wrapper.')

    condor_parser.add_argument(
        "-G",
        "--group",
        required=False,
        help="Group/Experiment/Subgroup for priorities and accounting",
        action=StoreGroupinEnvironment)

    condor_parser.add_argument(
        "-t",
        "--test",
        required=False,
        help="For testing only: specify condor_schedd")

    condor_parser.add_argument(
        "-spool",
        required=False,
        help="Spool all required input files, job event log, and proxy over the connection to the condor_schedd. This is done by default.",
        action='store_true')

    condor_parser.add_argument(
        "-v",
        "--verbose",
        required=False,
        help="Verbose output",
        action='store_true')

    # currently not used, but wanted to put the placeholder in
    condor_parser.add_argument(
        "--credentials",
        help="credential information")


#   PARSE ARGS TO GET SUBMISSION ARGUMENTS
    args, cmd_args = condor_parser.parse_known_args()

    if args.group is not None:
        group = args.group
    else:
        group = os.environ["GROUP"]


    if args.test is not None:
        schedd_name = args.test
    else:
        schedd_add = get_schedd({"group": group})
        schedd_name = schedd_add.eval("Machine")

    if args.verbose:
        print("schedd_name is : %s" % schedd_name)
        print("cmd_args is : %s" % cmd_args)

    if args.spool:
        print("Spooling is done by default. No need to request it explicitly.")

    if '-name' in cmd_args:
        print("You are running a wrapper for condor_submit. The schedd is chosen for you. Please remove the '-name <schedd_name>' arguments from your command line and re-run, OR use /usr/bin/condor_submit.")
        return
    elif '-remote' in cmd_args:
        print("You are running a wrapper for condor_submit. The schedd is chosen for you. Please remove the '-remote <schedd_name>' arguments from your command line and re-run, OR use /usr/bin/condor_submit.")
        return



#   GET CREDENTIALS
#   these args may/may not come from the input args. for now let's keep it empty  
    cred_args = {}
    if args.credentials is not None:
        cred_args = args.credentials

    proxy, token = get_creds(cred_args)
    if args.verbose:
        print("proxy is : %s" % proxy)
        print("token is : %s" % token)


#   SUBMIT
    submit('', {}, schedd_name, cmd_args)


if __name__ == "__main__":
    main()
